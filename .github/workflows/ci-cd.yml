# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: CI / CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.20.x

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.4.x

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"

      - name: Starts the services as a dameon
        run: make develop-daemon

      - name: Unit test
        run: make test

      - name: Setup Cypress environment
        run: echo 'export CYPRESS_ADMIN_USER=${{ secrets.CYPRESS_ADMIN_USER }}' >> cypress.env && echo 'export CYPRESS_ADMIN_PASSWORD=${{ secrets.CYPRESS_ADMIN_PASSWORD }}' >> cypress.env

      - name: Run Cypress tests
        uses: cypress-io/github-action@v5.1.0

      - name: Stop the services
        run: make develop-daemon-stop

  deploy:
    runs-on: ubuntu-latest
    environment: Deploy
    needs: unit-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup SSH environment
        run: mkdir -p .secrets && echo "${{ secrets.SERVER_PRIVATE_KEY }}" > .secrets/labyrinth-ed25519.pem && chmod 0400 .secrets/labyrinth-ed25519.pem

      - name: Setup deploy environment
        run: echo 'SERVER_USER=${{ secrets.SERVER_USER }}' >> .secrets/.env && echo 'SERVER_HOSTNAME=${{ secrets.SERVER_HOSTNAME }}' >> .secrets/.env

      - name: Test SSH Connection
        run: make production-ssh-test

      - name: Deploy to Production
        run: make production-deploy
